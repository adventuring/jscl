(test (let ((x (read-from-string (prin1-to-string 'foo))))
        (and (symbolp x) (equal (symbol-name x) "FOO"))))
(test (let ((x (read-from-string (prin1-to-string 'fo\o))))
        (and (symbolp x) (equal (symbol-name x) "FOo"))))
(test (let ((x (read-from-string (prin1-to-string '1..2))))
        (and (symbolp x) (equal (symbol-name x) "1..2"))))
(test (let ((x (read-from-string (prin1-to-string '\1))))
        (and (symbolp x) (equal (symbol-name x) "1"))))
(test (let ((x (read-from-string (prin1-to-string '\-10))))
        (and (symbolp x) (equal (symbol-name x) "-10"))))
(test (let ((x (read-from-string (prin1-to-string '\.\.\.))))
        (and (symbolp x) (equal (symbol-name x) "..."))))
(test (let ((x (read-from-string (prin1-to-string '1E))))
        (and (symbolp x) (equal (symbol-name x) "1E"))))
(test (let ((x (read-from-string (prin1-to-string '\1E+2))))
        (and (symbolp x) (equal (symbol-name x) "1E+2"))))
(test (let ((x (read-from-string (prin1-to-string '1E+))))
        (and (symbolp x) (equal (symbol-name x) "1E+"))))

;; Printing numbers
(test (equal "145.2" (with-output-to-string (s)
                       (print 145.2 s))))
(test (equal "145.2" (with-output-to-string (s)
                       (princ 145.2 s))))
(test (equal "-145.2" (with-output-to-string (s)
                        (print 145.2 s))))
(test (equal "145" (with-output-to-string (s)
                     (print 145 s))))
(test (equal "145." (with-output-to-string (s)
                      (let ((*print-radix* t))
                        (print 145 s)))))
(test (equal "#b10010001" (with-output-to-string (s)
                            (let ((*print-radix* t)
                                  (*print-base* 2))
                              (print 145 s)))))
(test (equal "#3r12101" (with-output-to-string (s)
                          (let ((*print-radix* t)
                                (*print-base* 3))
                            (print 145 s)))))
(test (equal "#o221" (with-output-to-string (s)
                       (let ((*print-radix* t)
                             (*print-base* 8))
                         (print 145 s)))))
(test (equal "#x91" (with-output-to-string (s)
                      (let ((*print-radix* t)
                            (*print-base* 16))
                        (print 145 s)))))
(test (equal "#36r41" (with-output-to-string (s)
                        (let ((*print-radix* t)
                              (*print-base* 36))
                          (print 145 s)))))

(test (equal "-145" (with-output-to-string (s)
                      (print -145 s))))
(test (equal "#x-91" (with-output-to-string (s)
                       (let ((*print-radix* t)
                             (*print-base* 16))
                         (print -145 s)))))

;;; Printing strings
(test (string= "\"foobar\"" (write-to-string "foobar")))
(test (string= "\"foo\\\"bar\"" (write-to-string "foo\"bar")))

;;; Printing vectors
(test (string= "#()" (write-to-string #())))
(test (string= "#(1)" (write-to-string #(1))))
(test (string= "#(1 2 3)" (write-to-string #(1 2 3))))

;;; Lists
(test (string= "NIL" (write-to-string '())))
(test (string= "(1)" (write-to-string '(1))))
(test (string= "(1 2 3)" (write-to-string '(1 2 3))))
(test (string= "(1 2 . 3)" (write-to-string '(1 2 . 3))))
(test (string= "(1 2 3)" (write-to-string '(1 2 3))))
(test (string= "((1 . 2) 3)" (write-to-string '((1 . 2) 3))))
(test (string= "((1) 3)" (write-to-string '((1) 3))))

;;; Circular printing
(let ((vector #(1 2 nil)))
  (setf (aref vector 2) vector)
  (test (string= "#1=#(1 2 #1#)"
                 (let ((*print-circle* t))
                   (write-to-string vector)))))

(let ((list '(1)))
  (setf (cdr list) list)
  (test (string= "#1=(1 . #1#)"
                 (let ((*print-circle* t))
                   (write-to-string list)))))


